#!/usr/bin/env bash

# set -x;

# Stupid script for convert/resize images

# ------------------------------------------------------------------------------

declare -r  prog='phresize';
declare -r  version='1.2.0';
declare -r  log='/dev/null';
declare -r  dir='./0_RESIZED';
declare -r  pref='RES';
declare -ri qualitydef='100';
declare -ar sizes=( '1280x800' '1680x1050' '1920x1200' '2560x1600' );

declare -ri multiplier='2';
declare -i  verbose='0';

declare     source='png';

declare -r b=$(tput bold);
declare -r n=$(tput sgr0);

declare -a runlist=();


if [[ -x $(which convert) ]]; then :
else
    echo "${b}ERROR:${n} convert binary not found, install ImageMagick or GraphicsMagick";
    exit 1;
fi

function f_preset_source {

    local preset_source=${1};

    if [[ $preset_source ]]; then
        if [[ $preset_source =~ ^(png|tiff|tif)$ ]]; then
            source=${preset_source};
        else
            echo "${b}ERROR:${n} 'source' field must be 'png', 'tiff' or 'tif'";
            exit 1;
        fi
    fi

}

function f_preset_max_jobs {

    preset_jobs="${1}";

    if [[ $preset_jobs ]]; then
        if [[ $preset_jobs -ge 1 ]]; then :
        else
            echo "${b}ERROR:${n} value for ${b}-c${n} parameter must be >= 1";
            exit 1;
        fi
    else
        echo "${b}ERROR:${n} value for ${b}-c${n} parameter must be >= 1";
        exit 1;
    fi
}


function f_version {
            echo "$prog $version";
}

function f_help {

cat <<EOF

    Usage:

    ${b}$prog${n} [params] <mode> [flags]

         where ${b}mode${n} is:

             ${b}-a${n} - run standard covert/resize procedure (no files will be overwritten, default)
             ${b}-p${n} - create only PNG files (no files will be overwritten)
             ${b}-j${n} - create only JPG files (no files will be overwritten)
             ${b}-A${n} - overwrite exists files and create JPG and PNG
             ${b}-P${n} - owerwrite PNG files
             ${b}-J${n} - owerwrite JPG files

             ${b}-h${n} - print help and exit
             ${b}-V${n} - print version and exit

         and ${b}params${n} may be:

             ${b}-s png${n} - source files are PNGs in current directory (default)
             ${b}-s tif${n} or ${b}tiff${n} - source files are TIFFs in current directory

         and ${b}flags${n} may be:

             ${b}-v${n} - enable verbose mode

EOF
}

function f_prepare {

    local imgc="$(ls -1 *.${source} 2> ${log} | wc -l)";

    if [[ $imgc -ge 1 ]]; then :
    else
        echo "${b}ERROR:${n} ${source} files not found in current directory";
        exit 1;
    fi

    if [[ -d $dir ]]; then :
    else
        mkdir ${dir};
    fi
}

function f_generate_jobs {

    local to="${1}";
    local owr="${2}";

    for size in "${sizes[@]}"; do

        for i in IMG_*."${source}"; do

            local name="${i//.${source}/}";

            if [[ -d $dir/$to/${size} ]]; then : ; else mkdir -p ${dir}/${to}/${size}; fi
            local new="${dir}/${to}/${size}/${pref}_${name}_${size}.${to}";

            if [[ ${owr} = 'owr' ]]; then

                if [[ $verbose -eq 1 ]]; then
                    echo "${b}OWERWRITE:${n} ${i} as ${b}${to^^}${n} file ${new} with size ${b}${size}${n}";
                fi

                local job="convert -quality ${qualitydef} -resize ${size} ${i} ${new}";
                continue;
            fi

            if [[ -f ${new} ]]; then
                if [[ $verbose -eq 1 ]]; then
                    echo "${b}WARNING:${n} file ${new} already exists!";
                fi

                continue;
            else
                if [[ $verbose -eq 1 ]]; then
                    echo "${b}SAVE:${n} ${i} as ${b}${to^^}${n} file ${new} with size ${b}${size}${n}";
                fi
                local job="convert -quality ${qualitydef} -resize ${size} ${i} ${new}"
            fi

            # Push job to runlist:
            runlist+=("${job}");
        done
    done
}

# If f_check_jobs return 0 - f_execute_jobs run new job
# if return 1 - f_execute_jobs will not run new job
#
function f_check_jobs {

    local -i  return='1';
    local -i  max_jobs='1';
    local -ri nproc=$(nproc);

    if [[ $preset_jobs ]]; then
        max_jobs=${preset_jobs};
    else
        max_jobs=$(( $nproc * $multiplier ));
    fi

    local -i current_jobs=$(jobs | egrep -o '[0-9]+' | wc -l);

    if [[ $current_jobs -le $max_jobs ]]; then
        return=0;
    fi

    echo $return;
}

function f_execute_jobs {

    local -i complete_jobs_count='0';
    local -i failed_jobs_count='0';
    local -i total_jobs_count="${#runlist[@]}";
    local -i running_job_number='1';

    echo "--------------------------------------------------------------------------------";

    while true; do

        # Initialize counters
        local -i runflag=$(f_check_jobs);
        local -i runlist_total_elements="${#runlist[@]}";

        # Number of last element in runlist
        local -i runlist_last_element_number="$((runlist_total_elements-1))";

        if [[ $runflag -eq 0 ]]; then


            if [[ $runlist_total_elements -gt 0 ]]; then

                # Run job if cpus is availiable and runlist is not empty
                echo -ne "\r${b}INFO:${n} run ${running_job_number} of ${total_jobs_count}";

                eval "${runlist[$runlist_last_element_number]} &> ${log}" &

                # Check if job was completed successfully
                if [[ $? -eq 0 ]]; then
                    let complete_jobs_count++;
                else
                    let failed_jobs_count++;
                fi

                unset runlist["${runlist_last_element_number}"];
                let running_job_number++;

            else
                # If runlist is empty - show stat and gracefull exit

                echo -e "\n${b}INFO:${n} all complete!";

                echo "${b}STAT:${n} total jobs: ${b}$total_jobs_count${n}";
                echo "${b}STAT:${n} complete jobs: ${b}$complete_jobs_count${n}";
                echo "${b}STAT:${n} failed jobs: ${b}$failed_jobs_count${n}";

                exit 0;
            fi

        else

            # If no avail cpus - wait and start iteration again
            sleep 0.1;
            continue;
        fi

    done

}


while getopts ":vc:s:VhapjAPJ" opt; do
    case ${opt} in

        ('v')
            verbose=1 ;;

        ('c')
            f_preset_max_jobs ${OPTARG} ;;

        ('s')
            f_preset_source ${OPTARG} ;;

        ('V')
            f_version;
            exit 0 ;;

        ('h')
            f_help;
            exit 0 ;;

        ('a')
            f_prepare;
            f_generate_jobs png;
            f_generate_jobs jpg;
            f_execute_jobs;
            exit 0 ;;

        ('p')
            f_prepare;
            f_generate_jobs png;
            f_execute_jobs;
            exit 0 ;;

        ('j')
            f_prepare;
            f_generate_jobs jpg;
            f_execute_jobs;
            exit 0 ;;

        ('A')
            f_prepare;
            f_generate_jobs png owr;
            f_generate_jobs jpg owr;
            f_execute_jobs;
            exit 0 ;;

        ('P')
            f_prepare;
            f_generate_jobs png owr;
            f_execute_jobs;
            exit 0 ;;

        ('J')
            f_prepare;
            f_generate_jobs jpg owr;
            f_execute_jobs;
            exit 0 ;;

        (\?)
            echo "${b}ERROR:${n} invalid option: -$OPTARG" >&2
            f_help ;
            exit 0 ;;

    esac
done

shift $((OPTIND-1))
